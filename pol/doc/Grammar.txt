============================================================
POL Version 1.0 - Operators
============================================================
---BNF Grammar---

<stmt> ::= <asgn-expr> ;

<asgn-expr> ::= <cond-expr> (( = | += | -= | *= | /= | ^= ) <cond_expr>) *

<cond-expr> ::= <expr> (( && | || | == | != | <= | >= | < | >) <expr>)*

<expr> ::= <term> (( + | - ) <term>)*

<term> ::= <factor> (( * | / | % | ^) <factor>)*

<factor> ::= - <factor> | ! <cond-expr> | ID | NUM | STR | (<expr>)

--- Terminal Definitions ---
ID ::= [A-Za-z][A-Za-z0-9]*

NUM ::= [0-9]+(.[0-9]+)?

STR ::= ".*"

============================================================
POL Version 2.0 - Control Flow and Scope
============================================================
<compliation_unit> ::= (<func_declaration> | <declaration>)+

<declaration> ::= <identifier-list> ASSIGNMENT_OP ( <initalization_list> | <hash-initialization-list> | <array-initalization-list>)

<identfier-list> ::= <identifier> ( , <identifier> )*

<initalization-list> ::= <comp_expr> ( , <comp_expr> )*

<hash-intialization-list ::= [<comp_expr>, <comp_expr>] (, [<comp_expr>, <comp_expr>])*

<array-intialization-list ::= [<comp_expr> (,<comp_expr>)*]

<type-definition> ::= <identifier> | &<identifier>

<parameter-list> ::= <type-definitation> ( , <type-definitation>)*

<function-definition> ::= <identifier> ( <parameter-list> ) <body>

<body> ::= { <stmt>* }

<stmt> := <select_stmt> | <iterate_stmt> | <control_stmt> | <cond_expr> | <declartion>

<select-stmt> ::= if (<cond_expr>) <body> | if(<cond_expr>) <body> else <select-stmt> | if(<cond-expr) <body> else <body>

<iterate-stmt> ::= while(<cond-expr>) <body> | for(<asgn_expr>? <asgn_expr>? <asgn_expr>?) <body>

<control-stmt> ::= break; | continue; | return cond_expr? ;

<cond-expr> ::= <add-expr> (( && | || | == | != | <= | >= | < | >) <add-expr>)*

<add-expr> ::= <mult-expr> (( + | - ) <mult-expr>)*

<mult-expr> ::= <unary-expr> (( * | / | % | ^) <unary-expr>)*

<unary-expr> ::= - <atom> | ! <atom> | <atom>

atom ::= <identifier>
       | (<expr>)
       | <identifier>[ <cond_expr> ]
       | <identifer>{ <cond_expr> }
       | STRING_CONSTANT
       | INTEGER_CONSTANT
       | FLOAT_CONSTANT

<identifier> ::= [A-z][A-z0-9]*

STRING_CONSTANT = ".*"

INTEGER_CONSTANT ::= [0-9]+

FLOAT_CONSTANT ::= [0-9]+(.[0-9]+)?
